#
# 20200623 jens heine 
#          dennis brossat
#          benjamin heine
#
# dupfinder - identify duplicate files
#
#set -x

FILELIST_DB="filelist.db"
FILEHASH_DB="filehash.db"
FILES_WITH_HASH_DB="fileswithash.db"
FILEHASH_DB_TMP="filehash.db.tmp"
DUPLICATES_DB="duplicates.db"
DUPLICATE_FILES_ARCHIVE_FOLDER="duplicates"
COPY_DUPLICATES_SCRIPT="copy_dups_from_root_path_to_archive.sh"
DELETE_DUPLICATES_FROM_ROOT_SCRIPT="delete_dups_from_root_path.sh"
ROOT_PATH=""
HASH_CMD="md5sum"
DEBUG=0
VERSION="20200718"
RECALC_EXISTING_HASHES="0"
USAGE_INFO_TEXT="

	dupfinder by Jens Heine <binbash@gmx.net> 2020
	             and Dennis Brossat <dennis.brossat@email.de>
		     and Benjamin Heine <benjaminheine@gmx.net>

USAGE

	dupfinder OPTIONS
   
OPTIONS

	-a Search in path for duplicates (requires -r)
	-c Calculate hashes for files in plain filelist file and add them to 
	   hash database
	-C Create duplicate files file from hash database
	-D Show contents of duplicates file
	-f search root path for files and create plain files file (requires -r)
	-g Generate scripts to copy duplicates and to delete duplicates
	-h Show usage information
	-H Show contents of hash database
	-n Calculate new hash for all files found, even if they exist in hash db
	-p Create plain files filelist (requires -r)
	-P Show contents of plain filelist file
	-r PATH set root path
	-R Delete filehash database
	-s Show statistics of database
	-v Verbose mode
	-V Show program version

EXAMPLES

	1)
	Search root path /tmp/Pictures and create a has database for all files. If 
	there is a hash	found in the database for a file in root path, the hash 
	calculation will be skipped. To	calculate all hashes again even if they are 
	already in the database, add -n. Output will be verbose (-v).

	> dupfinder -avr /tmp/Pictures

	2)
	Show stats of current database files.

	> dupfinder -s

"


#
# Functions
#
function logInfo() {
	if [ $DEBUG -eq 1 ]; then
		echo "> $1"
	fi
}

# Count and print lines in given file
function countEntriesInFile() {
	[ ! "$1" ] && {
		echo 0
	        return
	}
	if [ ! -r "${1}" ];then
		echo 0
		return
	fi
	FILE_COUNT=`wc -l ${1}|cut -d " " -f1`
	echo $FILE_COUNT
}

function countFileSizeInBytes() {
	[ ! "$1" ] && {
                echo 0
                return
        }
        if [ ! -r "${1}" ];then
                echo 0
                return
        fi
	FILE_SIZE=`wc -c ${1}|cut -d " " -f1`
	let FILE_SIZE="${FILE_SIZE}"/1024
	echo "$FILE_SIZE Kb"
}

function createPlainFileList() {
	[ "" == "$1" ] && return
	[ "" == "${FILELIST_DB}" ] && return
	logInfo "Creating full plain file list for root folder \"${ROOT_PATH}\""
	find ${ROOT_PATH} -type f 2>/dev/null | sort > ${FILELIST_DB}
	FILES_IN_FILELIST_DB=`countEntriesInFile ${FILELIST_DB}`
	logInfo "Fileslist DB has ${FILES_IN_FILELIST_DB} files."
	if [ ${RECALC_EXISTING_HASHES} -eq 0 ];then
		logInfo "Removing files that already have a hash value in the filehash database."
		if [ ! -s ${FILEHASH_DB} ];then
			logInfo "Filehash database does not exist or is empty."
			logInfo "Skipping to find already existing hashes for file in root path."
		else
			logInfo "Create file with filenames of existing files with hashes..."
			cat ${FILEHASH_DB} | cut -d ' ' -f2- | sed 's/^ //g' | sort > ${FILES_WITH_HASH_DB}
#			logInfo "Creating file with files in path: ${ROOT_PATH}..."
#			find ${ROOT_PATH} -type f 2>/dev/null | sort > ${FILELIST_DB}.tmp
			cp ${FILELIST_DB} ${FILELIST_DB}.tmp
			logInfo "Creating file with files in root path which have no hash..."
			diff --new-line-format="%L" --old-line-format="" --unchanged-line-format="" ${FILES_WITH_HASH_DB} ${FILELIST_DB}.tmp > ${FILELIST_DB}
		fi
		FILES_IN_FILELIST_DB=`countEntriesInFile ${FILELIST_DB}.tmp`
		logInfo "Files found in root path: ${FILES_IN_FILELIST_DB}"
		FILES_IN_FILELIST_DB_AFTER_DIFF=`countEntriesInFile ${FILELIST_DB}`
		SKIPPED_FILES_COUNT=$((${FILES_IN_FILELIST_DB} - ${FILES_IN_FILELIST_DB_AFTER_DIFF}))
		if [ ${FILES_IN_FILELIST_DB} -eq 0 ];then
			PERCENT_SKIPPED=0
		elif [ ${FILES_IN_FILELIST_DB_AFTER_DIFF} -eq 0 ];then
			PERCENT_SKIPPED=100
		else	
			PERCENT_SKIPPED=`echo "100 * ( ${FILES_IN_FILELIST_DB} - ${FILES_IN_FILELIST_DB_AFTER_DIFF} ) / ${FILES_IN_FILELIST_DB}" | bc`
		fi
		logInfo "Files skipped because hashes are already in db: ${SKIPPED_FILES_COUNT} / ${PERCENT_SKIPPED}%"
		[ -f "${FILELIST_DB}.tmp" ] && rm "${FILELIST_DB}.tmp"
		[ -f "${FILES_WITH_HASH_DB}" ] && rm "${FILES_WITH_HASH_DB}"
	else
		logInfo "Calculate hashes for all files in root path, even if they exist in filehash database."
	fi
	logInfo "Filelist db: ${FILELIST_DB}"
	logInfo "Found `countEntriesInFile "${FILELIST_DB}"` file(s) to hash."
	logInfo "Plain file list filesize: `countFileSizeInBytes "${FILELIST_DB}" bytes`"
}

function createHash() {
	FILENAME="$1"
	[ "" == "$FILENAME" ] && return
	[ ! -r "$FILENAME" ] && return
	HASH=`$HASH_CMD "${FILENAME}"`
	echo "$HASH"
}

function deleteFileHashDatabase() {
	logInfo "Deleting database"
	[ "" == "${FILEHASH_DB}" ] && return
	[ -f "${FILEHASH_DB}" ] && {
		logInfo "Deleting ${FILEHASH_DB}"
		rm "${FILEHASH_DB}"
	}
	[ -f "${FILELIST_DB}" ] && {
		logInfo "Deleting ${FILELIST_DB}"
		rm "${FILELIST_DB}"
	}
	[ -f "${DUPLICATES_DB}" ] && {
		logInfo "Deleting ${DUPLICATES_DB}"
		rm "${DUPLICATES_DB}"
	}
	logInfo "Done."
}

function calculateHashesForPlainfilesFileIntoFileHashDatabase() {
	FILES_TO_HASH=`countEntriesInFile "${FILELIST_DB}"`
	[ "${FILES_TO_HASH}" -eq 0 ] && {
		logInfo "0 files in filehash database. No files to calculate hashes for."
		return
	}
	logInfo "Calculating hashes for ${FILES_TO_HASH} files to filehashdatabase..."
	START_SECONDS=`date +%s`
	FILES_DONE=0
	echo -n "Files done: "
	tput sc
	while read LINE;do
		CURRENTFILENAME="${LINE}"
		CURRENTHASH=`createHash "${CURRENTFILENAME}"`
		FILES_DONE=$((FILES_DONE+1))
		echo "${CURRENTHASH}" >> "${FILEHASH_DB}"
		echo -n "${FILES_DONE} / ${FILES_TO_HASH}"
		tput rc
	done < ${FILELIST_DB}
	echo
	END_SECONDS=`date +%s`
	SECONDS_NEEDED=`echo $END_SECONDS - $START_SECONDS | bc`
	if [ ${SECONDS_NEEDED} -ne 0 ];then
		HASHES_PER_SECOND=`echo $FILES_TO_HASH / $SECONDS_NEEDED | bc`
	else
		HASHES_PER_SECOND=$FILES_TO_HASH
	fi
	echo "Time elapsed  : $SECONDS_NEEDED seconds"
	echo "Hashes/second : $HASHES_PER_SECOND"
	sortFileHashDatabase
	removeDuplicateFileHashDatabaseEntries
	logInfo "Done."
}

function sortFileHashDatabase() {
	logInfo "Sorting `countEntriesInFile "${FILEHASH_DB}"` files in filehash database..."
	cat "${FILEHASH_DB}" | sort > "${FILEHASH_DB_TMP}"
	logInfo "Moving ${FILEHASH_DB_TMP} to ${FILEHASH_DB}"
	mv "${FILEHASH_DB_TMP}" "${FILEHASH_DB}"
	logInfo "Sorting FileHashDatabase done."
}

# Works only with sorted filehashdatabase
function createDuplicateFilelist() {
	logInfo "Searching duplicates in database and creating duplicates db..."
	[ `countEntriesInFile "${FILEHASH_DB}"` -eq 0 ] && {
		logInfo "Filehash db is empty. No duplicates found."
		return
	}
	uniq -d -w 32 "${FILEHASH_DB}" "${DUPLICATES_DB}.tmp"
	cat ${DUPLICATES_DB}.tmp | cut -d ' ' -f2- | sed 's/^ //g' | sort > ${DUPLICATES_DB}
	[ -f "${DUPLICATES_DB}.tmp" ] && rm "${DUPLICATES_DB}.tmp"
	logInfo "Done."
}

function createCopyDuplicatesToArchiveScript() {
	logInfo "Creating script to copy duplicates to archive: ${DUPLICATE_FILES_ARCHIVE_FOLDER}..."
	cat ${DUPLICATES_DB} | sed "s/^/cp -uv --parents '/g" | sed "s/$/' ${DUPLICATE_FILES_ARCHIVE_FOLDER}/g" | sort > ${COPY_DUPLICATES_SCRIPT}
	chmod +x ${COPY_DUPLICATES_SCRIPT}
	logInfo "Script created: ${COPY_DUPLICATES_SCRIPT}"
}

function createDeleteDuplicatesFromRootPathScript() {
	logInfo "Creating script to delete duplicates in root folder: ${ROOT_PATH}..."
	cat ${DUPLICATES_DB} | sed "s/^/rm -v '/g" | sort > ${DELETE_DUPLICATES_FROM_ROOT_SCRIPT}
	chmod +x ${DELETE_DUPLICATES_FROM_ROOT_SCRIPT}
	logInfo "Script created: ${DELETE_DUPLICATES_FROM_ROOT_SCRIPT}"
}

function showDuplicates() {
	logInfo "Show duplicate files:"
	cat "${DUPLICATES_DB}"
	echo "Found `countEntriesInFile ${DUPLICATES_DB} duplicates.`"
}

# Works only with sorted filehashdatabase
function removeDuplicateFileHashDatabaseEntries() {
	logInfo "Removing duplicate file hash entries in database..."
	logInfo "Entries before cleanup: `countEntriesInFile "${FILEHASH_DB}"`"
	cat "${FILEHASH_DB}" | uniq > "${FILEHASH_DB_TMP}"
	mv "${FILEHASH_DB_TMP}" "${FILEHASH_DB}"
	logInfo "Entries after  cleanup: `countEntriesInFile "${FILEHASH_DB}"`"
}

function showUsage() {
	echo "$USAGE_INFO_TEXT"
}

function showHelpText() {
	echo
	echo "Wrong usage. Use -h for help."
	echo
}

function showVersion() {
	echo
	echo "	dupfinder version: ${VERSION}"
	echo
	echo "	Jens Heine <binbash@gmx.net>"
	echo "	and Dennis Brossat"
	echo "	and Benjamin Heine"
	echo
}

function showStats() {
	echo
	echo "Statistics"
	echo
	echo -e "Files in filehash database : `countEntriesInFile "${FILEHASH_DB}"`\t(`countFileSizeInBytes "${FILEHASH_DB}"`)\tmodified: `stat -c %y "${FILEHASH_DB}"`"
	echo -e "Files in plain file list   : `countEntriesInFile "${FILELIST_DB}"`\t(`countFileSizeInBytes "${FILELIST_DB}"`)\tmodified: `stat -c %y "${FILELIST_DB}"`"
	echo -e "Files in duplicates file   : `countEntriesInFile "${DUPLICATES_DB}"`\t(`countFileSizeInBytes "${DUPLICATES_DB}"`)\tmodified: `stat -c %y "${DUPLICATES_DB}"`"
	echo
}

function exitIfRootPathIsNotSet() {
	# Check if the rootpath is set
	if [ -z "$ROOT_PATH" ];then
		echo "Error: root path is empty."
		exit 1
	fi
}

function printDuplicatesPercent() {
	HASHES_COUNT=`countEntriesInFile "${FILEHASH_DB}"`
	DUPLICATES_COUNT=`countEntriesInFile "${DUPLICATES_DB}"`
	if [ "${HASHES_COUNT}" -eq 0 ];then
		echo "Found 0 duplicates in 0 files (0%)."
		return
	else
		DUPLICATES_PERCENT=`echo "100 * $DUPLICATES_COUNT / $HASHES_COUNT" | bc`
		echo "Found $DUPLICATES_COUNT duplicates in $HASHES_COUNT files (${DUPLICATES_PERCENT}%)."
	fi
}

function touchDBFiles() {
	[ ! -f ${FILEHASH_DB} ] && {
		logInfo "Filehash DB \"${FILEHASH_DB}\" not found. Touching it."
		touch ${FILEHASH_DB}
	}
	[ ! -f ${FILELIST_DB} ] && {
		logInfo "Filehlist DB \"${FILELIST_DB}\" not found. Touching it."
		touch ${FILELIST_DB}
	}
	[ ! -f ${DUPLICATES_DB} ] && {
		logInfo "Duplicates DB \"${DUPLICATES_DB}\" not found. Touching it."
		touch ${DUPLICATES_DB}
	}
}


########################################################################################################
# Main
########################################################################################################

# If DB files do not exist touch them
touchDBFiles

ARGUMENTS_EXIST=0
while getopts "acCDfghHnpPr:RsvV" options; do
	ARGUMENTS_EXIST=1
	case "$options" in
		a) ACTION="SEARCH_PATH_FOR_DUPLICATES"
		   ;;
		c) # Calculate hashes for files in plain files filelist
		   ACTION="CALCULATE_HASHES_FOR_FILES_IN_PLAIN_FILELIST_FILE"
		   ;;
		C) # create duplicate files file
		   ACTION="CREATE_DUPLICATES_FILE_FROM_FILEHASH_DATABASE"
		   ;;
		v) # Switch on verbose logging
		   echo "> Verbose mode = ON"
		   DEBUG=1
		   ;;
		D) echo "Show contents of duplicates file:"
		   cat "${DUPLICATES_DB}"
		   echo "Files in duplicates file   : `countEntriesInFile "${DUPLICATES_DB}"`"
		   exit 0
		   ;;
		f) ACTION="FIND_FILES_AND_CREATE_PLAIN_FILE_LIST"
		   ;;
		g) ACTION="GENERATE_SCRIPTS"
		   ;;
		h) showUsage
		   exit 0
		   ;;
		H) echo "Show contents of hashdatabase file:"
		   cat "${FILEHASH_DB}"
		   echo "Files in filehash database : `countEntriesInFile "${FILEHASH_DB}"`"
		   exit 0
		   ;;
		p) # Create plain files filelist
		   ACTION="CREATE_PLAIN_FILES_FILELIST"
		   ;;
		P) echo "Show contents of plain filelist file:"
		   cat "${FILELIST_DB}"
		   echo "Files in plain file list   : `countEntriesInFile "${FILELIST_DB}"`"
		   exit 0
		   ;;
		r) ROOT_PATH="${OPTARG}"
		   ;;
		R) # Delete filehashdatabase file
		   ACTION="DELETE_FILEHASH_DATABASE_FILE"
		   ;;
		s) showStats
		   exit 0
		   ;;
		n) RECALC_EXISTING_HASHES=1
		   ;;
		V) ACTION="SHOW_VERSION"
		   showVersion
		   exit 0
		   ;;
		*) showHelpText
		   exit 0
		   ;;
	esac
done

if [ "1" != "$ARGUMENTS_EXIST" ];then
  showHelpText
  exit 1
fi

case "${ACTION}" in
	SEARCH_PATH_FOR_DUPLICATES)
		exitIfRootPathIsNotSet
		createPlainFileList ${ROOT_PATH}
		calculateHashesForPlainfilesFileIntoFileHashDatabase
		createDuplicateFilelist
		printDuplicatesPercent
		exit 0
		;;
	CREATE_PLAIN_FILES_FILELIST)
		exitIfRootPathIsNotSet
		createPlainFileList ${ROOT_PATH}
		;;
	CREATE_PLAIN_FILES_FILELIST)
		exitIfRootPathIsNotSet
		createPlainFileList ${ROOT_PATH}
		exit 0
		;;
	CALCULATE_HASHES_FOR_FILES_IN_PLAIN_FILELIST_FILE)
		calculateHashesForPlainfilesFileIntoFileHashDatabase
		exit 0
		;;
	DELETE_FILEHASH_DATABASE_FILE)
		echo "Delete filehash database? (y/Y)"
		read X
		[ "${X}" = "y" -o "${X}" = "Y" ] && {
			deleteFileHashDatabase
			echo "Database deleted."
			exit 0
		}
		echo "Aborted."
		exit 0
		;;
	CREATE_DUPLICATES_FILE_FROM_FILEHASH_DATABASE)
		createDuplicateFilelist
		printDuplicatesPercent
		exit 0
		;;
	GENERATE_SCRIPTS)
		createCopyDuplicatesToArchiveScript
		createDeleteDuplicatesFromRootPathScript
		exit 0
		;;
esac

exit 0




